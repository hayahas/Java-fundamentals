/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

public class Library {
//    public boolean someLibraryMethod() {
//        return true;
//    }
    public static ArrayList<Integer> roll(int n) {
        ArrayList<Integer> rolledNumbers = new ArrayList<>();

        for(int i=0 ;i<n;i++){
            Random random = new Random();
            rolledNumbers.add(random.nextInt(6 - 1 + 1) + 1);
        }
        System.out.println(rolledNumbers);
        return rolledNumbers;
    }
    static boolean containsDuplicate(int[] arr){
        int count=0;
        for(int i=0;i<= arr.length-1 ;i++){
            for(int j=i+1;j<arr.length; j++){
                if(arr[i] == arr[j]){
                    count++;
                }
            }}

        if (count > 0){
            return true;
        }

        return false;
    }

    static double calculateAverage(int[] arr) {
        int sum =0;
        for(int i=0 ;i <arr.length -1; i++){
            sum+=arr[i];
        }
        return sum/arr.length;
    }


    public static int arrayOfArrays(int[][] arr) {

        int sum=0; int count=0; int min=1000;
        for(int i=0;i<arr.length -1; i++){
            for(int j=0;j<arr[i].length;j++){
                sum+=arr[i][j];
                count++;
                if(sum/count < min)
                    min=sum/count;

            }
        }

        return min;
    }

    static void checkWeather(int[][] arr) {
        Set<Integer> unique = new HashSet<>();
        for (int[] row : arr) {
            for (int element : row) {
                unique.add(element);
            }
        }

        int max=0, min=1000;
        for (int i : unique) {
            if(i> max) {
                max=i; }
            else if (i<min) {
                min=i;
            }
        }
        System.out.println("High : " + max);
        System.out.println("Low : " + min);

        for (int i = min; i <= max; i++) {
            if (!unique.contains(i)) {
                System.out.println("Never Saw temp : " + i);
            }
        }
    }
    static String tally(List<String> votes){
        HashMap<String,Integer> countVotes = new HashMap<>();
        for (String vote : votes) {
            countVotes.put(vote, countVotes.getOrDefault(vote, 0) + 1);
        }
        int max =0;
        String highest="";
        for(String name : countVotes.keySet()){
            if(countVotes.get(name) > max){
                max=countVotes.get(name);
                highest= name;
            }
        }

        return highest;
    }
}
